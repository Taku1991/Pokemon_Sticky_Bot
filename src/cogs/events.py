import discord
from discord.ext import commands
import logging

class Events(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        """Wird ausgef√ºhrt wenn der Bot bereit ist"""
        logging.info(f'Bot ist bereit. Eingeloggt als {self.bot.user}')
        
        # üîß Optimierte Command-Synchronisation (Rate Limit vermeiden)
        try:
            logging.info("üîÑ Synchronisiere Commands global...")
            
            # Nur GLOBAL synchronisieren (viel schneller, kein Rate Limit)
            synced = await self.bot.tree.sync()
            logging.info(f"‚úÖ {len(synced)} Commands global synchronisiert")
            
            # Server-Count anzeigen
            server_count = len(self.bot.guilds)
            logging.info(f"üè† Bot ist auf {server_count} Servern aktiv")
            
        except Exception as e:
            logging.error(f"‚ùå Fehler beim Synchronisieren der Commands: {e}")
            # Fallback - versuche es in 10 Sekunden nochmal
            import asyncio
            await asyncio.sleep(10)
            try:
                logging.info("üîÑ Retry: Synchronisiere Commands...")
                synced = await self.bot.tree.sync()
                logging.info(f"‚úÖ {len(synced)} Commands nach Retry synchronisiert")
            except Exception as retry_error:
                logging.error(f"‚ùå Auch Retry fehlgeschlagen: {retry_error}")
        
        # Sticky Messages beim Start laden
        try:
            sticky_cog = self.bot.get_cog('StickyCog')
            if sticky_cog:
                await sticky_cog.load_sticky_messages()
                logging.info("‚úÖ Sticky Messages erfolgreich geladen")
                
                # üÜï Cleanup abgelaufener Archive beim Bot-Start
                cleanup_count = await sticky_cog.cleanup_expired_archives()
                if cleanup_count > 0:
                    logging.info(f"üßπ {cleanup_count} abgelaufene Archive beim Start bereinigt")
                    
                # üÜï Periodischen Cleanup-Task starten
                self.start_periodic_cleanup()
                
        except Exception as e:
            logging.error(f"‚ùå Fehler beim Laden der Sticky Messages: {e}")

    def start_periodic_cleanup(self):
        """Startet periodischen Cleanup-Task f√ºr abgelaufene Archive"""
        import asyncio
        
        async def periodic_cleanup():
            while True:
                try:
                    # Alle 6 Stunden pr√ºfen
                    await asyncio.sleep(6 * 3600)  # 6 Stunden
                    
                    sticky_cog = self.bot.get_cog('StickyCog')
                    if sticky_cog:
                        cleanup_count = await sticky_cog.cleanup_expired_archives()
                        if cleanup_count > 0:
                            logging.info(f"üßπ Periodische Bereinigung: {cleanup_count} abgelaufene Archive gel√∂scht")
                        
                except Exception as e:
                    logging.error(f"‚ùå Fehler beim periodischen Cleanup: {e}")
        
        # Task im Hintergrund starten
        asyncio.create_task(periodic_cleanup())
        logging.info("üîÑ Periodischer Archive-Cleanup gestartet (alle 6h)")

    @commands.Cog.listener()
    async def on_guild_join(self, guild):
        """Wird ausgef√ºhrt wenn der Bot einem neuen Server beitritt"""
        logging.info(f"üéâ Bot wurde zu Server '{guild.name}' hinzugef√ºgt!")
        
        try:
            # üîß KEINE sofortige Server-spezifische Synchronisation mehr
            # Commands sind bereits global verf√ºgbar
            logging.info(f"‚úÖ Commands sind bereits global verf√ºgbar f√ºr '{guild.name}'")
            
            # üÜï Pr√ºfe auf archivierte Sticky Messages f√ºr diesen Server
            sticky_cog = self.bot.get_cog('StickyCog')
            if sticky_cog:
                restored_count = await sticky_cog.restore_archived_messages_for_guild(guild.id)
                if restored_count > 0:
                    logging.info(f"üîÑ {restored_count} Sticky Messages aus Archiv wiederhergestellt!")
                    
                    # Optional: Benachrichtigung an ersten verf√ºgbaren Channel senden
                    try:
                        # Finde einen Text-Channel f√ºr die Benachrichtigung
                        for channel in guild.text_channels:
                            if channel.permissions_for(guild.me).send_messages:
                                import discord
                                embed = discord.Embed(
                                    title="üîÑ Sticky Messages wiederhergestellt!",
                                    description=f"‚úÖ **{restored_count} Sticky Messages** wurden automatisch aus dem 24h-Archiv wiederhergestellt!\n\n"
                                               f"üì¶ Grund: Bot war weniger als 24 Stunden weg\n"
                                               f"üí° Alle deine Sticky Messages sind wieder aktiv!",
                                    color=0x00ff00
                                )
                                embed.set_footer(text="üíæ Daten werden automatisch 24h nach Bot-Kick gespeichert")
                                await channel.send(embed=embed)
                                break
                    except Exception as e:
                        logging.error(f"‚ùå Fehler beim Senden der Wiederherstellungs-Benachrichtigung: {e}")
            
        except Exception as e:
            logging.error(f"‚ùå Fehler beim Guild-Join f√ºr Server {guild.name}: {e}")

    @commands.Cog.listener()
    async def on_guild_remove(self, guild):
        """Wird ausgef√ºhrt wenn der Bot einen Server verl√§sst oder gekickt wird"""
        logging.info(f"üëã Bot wurde von Server '{guild.name}' (ID: {guild.id}) entfernt")
        
        try:
            # 1. Bot-Berechtigungen f√ºr diesen Server l√∂schen
            from src.utils.permissions import load_permissions, save_permissions
            permissions = load_permissions()
            guild_str = str(guild.id)
            
            if guild_str in permissions:
                # Anzahl der betroffenen User loggen
                masters_count = len(permissions[guild_str].get('masters', []))
                editors_count = len(permissions[guild_str].get('editors', []))
                
                # Server aus Berechtigungen entfernen
                del permissions[guild_str]
                save_permissions(permissions)
                
                logging.info(f"üßπ Berechtigungen f√ºr Server '{guild.name}' bereinigt: "
                           f"{masters_count} Masters, {editors_count} Editors entfernt")
            
            # 2. Sticky Messages f√ºr diesen Server l√∂schen
            sticky_cog = self.bot.get_cog('Sticky')
            if sticky_cog:
                removed_count = await sticky_cog.cleanup_server_data(guild.id)
                if removed_count > 0:
                    logging.info(f"üßπ {removed_count} Sticky Messages f√ºr Server '{guild.name}' entfernt")
            
            logging.info(f"‚úÖ Vollst√§ndige Bereinigung f√ºr Server '{guild.name}' abgeschlossen")
            
        except Exception as e:
            logging.error(f"‚ùå Fehler beim Bereinigen der Server-Daten f√ºr '{guild.name}': {e}")

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        """Wird ausgef√ºhrt wenn ein Member einen Server verl√§sst"""
        # Nur Bot Master/Editor bereinigen, nicht bei normalem Member-Leave
        try:
            from src.utils.permissions import is_bot_admin, is_bot_editor, remove_bot_permissions
            
            # Pr√ºfen ob der verlassende User Bot-Berechtigungen hatte
            if is_bot_admin(member.id, member.guild.id) or is_bot_editor(member.id, member.guild.id):
                # Berechtigungen entfernen
                success = remove_bot_permissions(member.id, member.guild.id)
                
                if success:
                    logging.info(f"üßπ Bot-Berechtigungen f√ºr verlassenden User '{member.display_name}' "
                               f"auf Server '{member.guild.name}' entfernt")
                    
                    # Warnung wenn alle Masters weg sind
                    from src.utils.permissions import load_permissions
                    permissions = load_permissions()
                    guild_str = str(member.guild.id)
                    
                    if guild_str in permissions:
                        remaining_masters = permissions[guild_str].get('masters', [])
                        if not remaining_masters:
                            logging.warning(f"‚ö†Ô∏è Server '{member.guild.name}' hat keine Bot Masters mehr! "
                                          f"Jemand muss '/setup_botmaster' verwenden.")
                
        except Exception as e:
            logging.error(f"‚ùå Fehler beim Bereinigen von Member-Berechtigungen: {e}")

    @commands.Cog.listener()
    async def on_message(self, message):
        """Wird bei jeder neuen Nachricht ausgef√ºhrt"""
        # Ignoriere Bot-Nachrichten
        if message.author.bot:
            return
        
        # Sticky Message Handler
        try:
            sticky_cog = self.bot.get_cog('Sticky')
            if sticky_cog:
                await sticky_cog.handle_message_for_sticky(message)
        except Exception as e:
            logging.error(f"‚ùå Fehler beim Sticky Message Handling: {e}")

async def setup(bot):
    await bot.add_cog(Events(bot))